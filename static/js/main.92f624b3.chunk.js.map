{"version":3,"sources":["redux/types.js","redux/appReducer.js","redux/postsReducer.js","redux/rootReduser.js","redux/actions.js","components/Warnings.js","components/PostForm.js","components/Post.js","components/Loader.js","components/FetchedPost.js","components/Posts.js","App.js","redux/middleware.js","index.js"],"names":["CREATE_POST","FETCH_POSTS","SHOW_LOADER","HIDE_LOADER","SHOW_ALERT","HIDE_ALERT","initialState","loading","alert","posts","fetchedPost","rootReducer","combineReducers","state","action","type","concat","payload","app","hideLoader","showAlert","text","dispatch","setTimeout","hideAlert","Warning","className","role","PostForm","props","title","submitHandler","bind","changeHandler","event","preventDefault","this","trim","newPost","id","Date","now","toString","createPost","setState","persist","prev","target","name","value","onSubmit","htmlFor","onChange","React","Component","mapDispatchToProps","post","connect","Post","Loader","FetchedPost","useDispatch","useSelector","length","map","onClick","a","fetch","response","json","syncPost","App","forbedden","store","createStore","compose","applyMiddleware","thunk","next","filter","word","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92f624b3.chunk.js","sourcesContent":["export const CREATE_POST = 'POST/CREATE_POST';\nexport const FETCH_POSTS = 'POST/FETCHS_POST';\nexport const SHOW_LOADER = 'APP/SHOW_LOADER';\nexport const HIDE_LOADER = 'APP/HIDE_LOADER';\nexport const SHOW_ALERT = 'APP/ALERT_LOADER';\nexport const HIDE_ALERT = 'APP/ALERT_LOADER';\n\n","import { HIDE_LOADER, SHOW_LOADER, SHOW_ALERT, HIDE_ALERT } from \"./types\";\n\nconst initialState = {\n    loading: false,\n    alert: null\n}\n\nexport const appReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SHOW_LOADER:\n            return { ...state, loading: true };\n        case HIDE_LOADER:\n            return { ...state, loading: false };\n        case SHOW_ALERT:\n            return { ...state, alert: action.payload };\n        case HIDE_ALERT:\n            return { ...state, alert: null };\n        default:\n            return state;\n    }\n}","import { CREATE_POST, FETCH_POSTS } from './types';\n// в данном файле в зависимости от типа действия action выполняем ту или иную логику\n\n//задаем начальное состояние для постов\nconst initialState = {\n    posts: [],\n    fetchedPost: []\n};\nexport const postsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case CREATE_POST:\n            //action.payload - посты\n            return { ...state, posts: state.posts.concat([action.payload]) };\n        case FETCH_POSTS:\n            return { ...state, fetchedPost: action.payload };\n        default:\n            return state;\n    }\n};","import { combineReducers } from 'redux';\nimport { appReducer } from './appReducer';\nimport { postsReducer } from './postsReducer';\n// файл отвечает за то, чтобы все редюсеры были видны\nexport const rootReducer = combineReducers({\n    posts: postsReducer,\n    app: appReducer\n});","import { CREATE_POST, FETCH_POSTS, SHOW_LOADER, HIDE_LOADER, SHOW_ALERT, HIDE_ALERT } from \"./types\";\n\nexport function createPost(post) {\n    return {\n        type: CREATE_POST,\n        payload: post\n    }\n};\n\nexport function showLoader() {\n    return {\n        type: SHOW_LOADER,\n    }\n};\n\nexport function hideLoader() {\n    return {\n        type: HIDE_LOADER,\n    }\n};\n\nexport function showAlert(text) {\n    return dispatch => {\n        dispatch({\n            type: SHOW_ALERT,\n            payload: text\n        });\n\n        setTimeout(()=> {\n            dispatch(hideAlert()); // скрываем ошибку\n        }, 3000)\n    }\n};\n\nexport function hideAlert() {\n    return {\n        type: HIDE_ALERT,\n    }\n};\n\n\nexport function fetchPosts() {\n    return async dispatch => {\n        try {\n            dispatch(showLoader());\n            const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5');\n            const json = await response.json();\n            dispatch({\n                type: FETCH_POSTS,\n                payload: json\n            });\n            dispatch(hideLoader());\n        } catch(e) {\n            dispatch(showAlert('Что-то пошло не так'));\n            dispatch(hideLoader());\n        }\n    }\n}","import React from 'react';\n\nexport default function Warning({text}) {\n    return (\n        <div className=\"alert alert-primary\" role=\"alert\">\n           {text}\n        </div>\n    )\n};","import React from 'react';\nimport { connect } from 'react-redux';\nimport {createPost, showAlert, hideAlert } from '../redux/actions';\nimport Warning from './Warnings';\n\nclass PostForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            title: ''\n        };\n        this.submitHandler = this.submitHandler.bind(this);\n        this.changeHandler = this.changeHandler.bind(this);\n    }\n\n    submitHandler(event) {\n        event.preventDefault();\n        const { title } = this.state;\n\n        if (!title.trim()) {\n            return this.props.showAlert('Поле пустое!')\n        }\n\n        const newPost = {\n            title, \n            id: Date.now().toString()\n        };\n        //с помощью нее вызывает диспатч и изменяем наш стейт (хранилище), по сути добавляем пост в хранилище\n        this.props.createPost(newPost);\n        \n        this.setState({\n            title: ''\n        });\n    }\n\n    changeHandler(event) {\n        event.persist();\n        this.setState(prev => ({...prev, ...{\n            [event.target.name]: event.target.value\n        }}))\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.submitHandler}>\n\n                { this.props.alert && <Warning text={this.props.alert} />}\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"title\" className=\"form-label\">Заголовок поста</label>\n                    <input \n                        type=\"text\" \n                        className=\"form-control\"\n                        id=\"title\" \n                        name=\"title\"\n                        value={this.state.title} \n                        onChange={this.changeHandler} \n                    />\n                </div>\n                <button className=\"btn btn-success\" type='submit'>Запостить</button>\n            </form>\n        )\n    } \n};\n//теперь в this.props есть функция createPost которая лежит в actions.js. Т.е. какие action проецировать на свойства компонента\nconst mapDispatchToProps = {\n    createPost,\n    showAlert,\n    hideAlert\n};\n\nconst mapStateToProps = (state) => ({\n    alert: state.app.alert\n})\n\n// соединяем хранище с компоненотом\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm);","import React from 'react';\n\nexport default function Post({post}) {\n    return (\n        <div className=\"card\">\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">{post.title}</h5>\n                <p className=\"card-text\"></p>\n            </div>\n        </div>\n    )\n};","import React from 'react';\n\nexport default function Loader() {\n    return (\n        <div className=\"spinner-border text-primary\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    )\n};","import React from 'react';\nimport Post from './Post';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchPosts } from '../redux/actions';\nimport Loader from './Loader';\n\nexport default function FetchedPost() {\n    const dispatch = useDispatch(); // с помощью этого создаем action creater, который принимает action\n    const posts = useSelector(state => state.posts.fetchedPost); //обозначаем, что нужно \"достать\" и хранилища\n    const loading = useSelector(state => state.app.loading);\n    \n    if (loading) {\n        return <Loader />\n    }\n\n    if (!posts.length) return (<button onClick={() => dispatch(fetchPosts())} className=\"btn btn-primary\">Загрузить</button>);\n\n    return posts.map((post) => {\n        return <Post post={post} key={post.id} />\n    });\n};","import React from 'react';\nimport Post from './Post';\nimport { connect } from 'react-redux'\n\nconst Posts = ({syncPost}) => {\n    if(!syncPost.length) return (<p className=\"text-center\">Постов пока нет</p>);\n\n    return syncPost.map((post) => {\n        return <Post post={post} key={post.id} />\n    });\n};\n// преобразуем нужные поля стейта в пропсы для компонента.  Стейт берем из редукса, в данном случае из postsReducer\nconst mapStateToProps = (state) => {\n    return {\n        syncPost: state.posts.posts\n    };\n};\n\nexport default connect(mapStateToProps, null)(Posts);","import React from 'react';\nimport PostForm from './components/PostForm';\n//import Post from './components/Post';\nimport FetchedPost from './components/FetchedPost';\nimport Posts from './components/Posts';\n\nfunction App() {\n  return (\n    <div className=\"container pt-3\">\n      <div className=\"row\">\n        <div className=\"col\">\n        <PostForm />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h2>Синхронные посты</h2>\n          <Posts />\n        </div>\n        <div className=\"col\">\n        <h2>Асинхронные посты</h2>\n          <FetchedPost />\n        </div>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import { CREATE_POST } from \"./types\";\nimport { showAlert } from './actions';\n\nconst forbedden = [ 'fuck', 'php', 'spam'];\n\nexport function forbiddenWordsMiddleware({ dispatch }) {\n    return function(next){\n        return function(action) {\n            if(action.type === CREATE_POST) {\n                const found = forbedden.filter(word => action.payload.title.includes(word));\n                if(found.length) {\n                    return dispatch(showAlert('В используете плохие слова'))\n                }\n            }\n            return next(action)\n        }\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk'; //для асинхронных событий\nimport { rootReducer } from './redux/rootReduser';\nimport App from './App';\nimport { forbiddenWordsMiddleware } from './redux/middleware';\n\n\n// создаем хранилище\nconst store = createStore(rootReducer,\n  compose(applyMiddleware(\n    thunk,\n    forbiddenWordsMiddleware,\n  ) \n  //,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  ));\n// делаем связку компонентов с редуксом, так они \"о нем узнают\"\nconst app = (\n  <Provider store={store}>\n    <App />\n    </Provider>\n)\n\nReactDOM.render(\n  app,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}